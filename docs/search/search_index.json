{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pspring-rest-client This framework is member of pspring based family of frameworks. It provides a means to create rest clients with minimal code. requests library is used internally for http requests. Annotations / Decorators that come along with this framework are listed below @RestClient(url=\"\") This decorator will add few boiler plate code that is required to interact with any rest endpoint. The methods significant are send , getUrl , addHeader . The send method would accept all arguments that requests.request method would. This method will throw PayloadException for all not HTTP 200 responses. The PayloadException has response and statusCode attributes which can be further used for error handling. The addHeader(name,value) method would add an header The getUrl will get the url that is configured along with @RestClient decorator. The handleError method is exists on the object will be invoked when received a non http 200 response. @Mapping(method=\"\",url=\"\") This decorator will take care of replacing parameters in the url from arguments passed, send the request and return the response Useful classes in this framework RegExResponseMapper - this class can be used to tranform one dictionary to another using regex. An example is shown below. The source dictionary fields can be accessed using $ notation. In the below example message is a field inside the `response dictionary. regexmapper = RegExResponseMapper({ \".*Customer does not exist.*\" : { \"statusCode\" : \"404\", \"code\" : \"APS-1001\", \"message\" : \"$response.message\" }, \".*\" : { \"statusCode\" : \"500\", \"code\" : \"APS-1002\", \"message\" : \"$response.message\" } }) @RestClient(url=\"https://myapi.com\") class MyRestClient(): @Mapping(method=\"GET\",url=\"/user/{firstName}\") def getCustomer(self,firstName): pass @Mapping(method=\"POST\",url=\"/user/\",data=json) def saveCustomer(self): pass @Mapping(method=\"POST\",url=\"/user/\") def saveCustomer(self,customer): self.json=customer def handleError(self,response): return regexmapper.map(response) To do: To return objects based on the return type from the response received.","title":"Home"},{"location":"#pspring-rest-client","text":"This framework is member of pspring based family of frameworks. It provides a means to create rest clients with minimal code. requests library is used internally for http requests. Annotations / Decorators that come along with this framework are listed below @RestClient(url=\"\") This decorator will add few boiler plate code that is required to interact with any rest endpoint. The methods significant are send , getUrl , addHeader . The send method would accept all arguments that requests.request method would. This method will throw PayloadException for all not HTTP 200 responses. The PayloadException has response and statusCode attributes which can be further used for error handling. The addHeader(name,value) method would add an header The getUrl will get the url that is configured along with @RestClient decorator. The handleError method is exists on the object will be invoked when received a non http 200 response. @Mapping(method=\"\",url=\"\") This decorator will take care of replacing parameters in the url from arguments passed, send the request and return the response Useful classes in this framework RegExResponseMapper - this class can be used to tranform one dictionary to another using regex. An example is shown below. The source dictionary fields can be accessed using $ notation. In the below example message is a field inside the `response dictionary. regexmapper = RegExResponseMapper({ \".*Customer does not exist.*\" : { \"statusCode\" : \"404\", \"code\" : \"APS-1001\", \"message\" : \"$response.message\" }, \".*\" : { \"statusCode\" : \"500\", \"code\" : \"APS-1002\", \"message\" : \"$response.message\" } }) @RestClient(url=\"https://myapi.com\") class MyRestClient(): @Mapping(method=\"GET\",url=\"/user/{firstName}\") def getCustomer(self,firstName): pass @Mapping(method=\"POST\",url=\"/user/\",data=json) def saveCustomer(self): pass @Mapping(method=\"POST\",url=\"/user/\") def saveCustomer(self,customer): self.json=customer def handleError(self,response): return regexmapper.map(response) To do: To return objects based on the return type from the response received.","title":"pspring-rest-client"},{"location":"changelog/","text":"Changelog (unreleased) Updated naming conventions. [vpalan799] Added some more tests. [vpalan799] Added unit tests. [vpalan799] Bumped version. [vpalan799] Added middleware feature. [vpalan799] Updated to handle empty responses. [vpalan799] Merge branch 'master' of https://github.com/vasudevan-palani/pspring- rest-client. [vpalan799] Update test.py. [Vasudevan PALANI] Some headers have special chars which cause issues, so therefore, logging as string. [vpalan799] Fixed calling constructor. [vpalan799] Fixed logging for no content type. [vpalan799] Fix for no content type. [vpalan799] Fix for no content type. [vpalan799] Fixed for proxy. [vpalan799] Fixed args error. [vpalan799] Updated. [vpalan799] Updated to use headers. [vpalan799] Fixed rest client mapping url. [Vasu] Updated read me. [Vasu] Updated options to send json. [Vasu] Updated timeout to float. [Palani] Added timeout. [Palani] Added timeout. [Palani] Updated to return json. [Palani] Using raise_for_status. [Palani] Added code to return headers. [Palani] Removed print. [Palani] Updated the readme. [Palani] Added mapping decorator. [Palani] Updated long desc. [Palani] Update README.md. [Vasudevan PALANI] Update README.md. [Vasudevan PALANI] Renamed backend to restclient. [Palani] Added responsemapper. [Palani] Added logging for json. [Palani] Added logging for json. [Palani] Added logging for json. [Palani] Added logging. [Palani] Added proxy support. [Palani] Added rest client. [Palani] Initial commit. [Vasudevan PALANI]","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"Updated naming conventions. [vpalan799] Added some more tests. [vpalan799] Added unit tests. [vpalan799] Bumped version. [vpalan799] Added middleware feature. [vpalan799] Updated to handle empty responses. [vpalan799] Merge branch 'master' of https://github.com/vasudevan-palani/pspring- rest-client. [vpalan799] Update test.py. [Vasudevan PALANI] Some headers have special chars which cause issues, so therefore, logging as string. [vpalan799] Fixed calling constructor. [vpalan799] Fixed logging for no content type. [vpalan799] Fix for no content type. [vpalan799] Fix for no content type. [vpalan799] Fixed for proxy. [vpalan799] Fixed args error. [vpalan799] Updated. [vpalan799] Updated to use headers. [vpalan799] Fixed rest client mapping url. [Vasu] Updated read me. [Vasu] Updated options to send json. [Vasu] Updated timeout to float. [Palani] Added timeout. [Palani] Added timeout. [Palani] Updated to return json. [Palani] Using raise_for_status. [Palani] Added code to return headers. [Palani] Removed print. [Palani] Updated the readme. [Palani] Added mapping decorator. [Palani] Updated long desc. [Palani] Update README.md. [Vasudevan PALANI] Update README.md. [Vasudevan PALANI] Renamed backend to restclient. [Palani] Added responsemapper. [Palani] Added logging for json. [Palani] Added logging for json. [Palani] Added logging for json. [Palani] Added logging. [Palani] Added proxy support. [Palani] Added rest client. [Palani] Initial commit. [Vasudevan PALANI]","title":"(unreleased)"},{"location":"pspring-rest-client/mapping/","text":"pspringrestclient.mapping Pspring Mapping decorator Mapping Objects class Mapping() A decorator for methods inside a class that is decorated by RestClient. When this decorator is applied to a method, turns that method to send a http request based on the arguments Example : import pspringrestclient @RestClient(url=\"https://myapi.com\") class TestClient(): @Mapping(url=\"/users\",method=\"GET\") def get_users(self): pass client = TestClient() client.get_users() # will trigger a http GET requedt to https://myapi.com/users The list of features of the mapping decorator are * provides easy access to make methods of a class that send http requests * kargs that are recognized are, method, url, data, timeout * can have dynamic variables in the url which will be evaluated with the function arguments * send non json payload in POST * set proxies in the request * set query string in HTTP request * send json payload in POST","title":"Mapping"},{"location":"pspring-rest-client/mapping/#pspringrestclientmapping","text":"Pspring Mapping decorator","title":"pspringrestclient.mapping"},{"location":"pspring-rest-client/mapping/#mapping-objects","text":"class Mapping() A decorator for methods inside a class that is decorated by RestClient. When this decorator is applied to a method, turns that method to send a http request based on the arguments Example : import pspringrestclient @RestClient(url=\"https://myapi.com\") class TestClient(): @Mapping(url=\"/users\",method=\"GET\") def get_users(self): pass client = TestClient() client.get_users() # will trigger a http GET requedt to https://myapi.com/users The list of features of the mapping decorator are * provides easy access to make methods of a class that send http requests * kargs that are recognized are, method, url, data, timeout * can have dynamic variables in the url which will be evaluated with the function arguments * send non json payload in POST * set proxies in the request * set query string in HTTP request * send json payload in POST","title":"Mapping Objects"},{"location":"pspring-rest-client/rest-client/","text":"pspringrestclient.restclient Pspring Rest Client module provides an easy interface and decorators to turn any class into a http client PayloadException Objects class PayloadException(Exception) [summary] Arguments : Exception [type] - [description] RestClient Objects class RestClient() RestClient is a class decorator that adds below capabilities to the class * Adds a method called add_header with which we can add headers to the http request * Adds a method called add_middleware, this method will allow hooks to modify the http request and response before it is returned * Adds a method called send, which will trigger the http request * Adds a method called finalize, which will be a pre-hook before http request is sent * Adds a method called getUrl which retuns the current url","title":"Rest Client"},{"location":"pspring-rest-client/rest-client/#pspringrestclientrestclient","text":"Pspring Rest Client module provides an easy interface and decorators to turn any class into a http client","title":"pspringrestclient.restclient"},{"location":"pspring-rest-client/rest-client/#payloadexception-objects","text":"class PayloadException(Exception) [summary] Arguments : Exception [type] - [description]","title":"PayloadException Objects"},{"location":"pspring-rest-client/rest-client/#restclient-objects","text":"class RestClient() RestClient is a class decorator that adds below capabilities to the class * Adds a method called add_header with which we can add headers to the http request * Adds a method called add_middleware, this method will allow hooks to modify the http request and response before it is returned * Adds a method called send, which will trigger the http request * Adds a method called finalize, which will be a pre-hook before http request is sent * Adds a method called getUrl which retuns the current url","title":"RestClient Objects"}]}